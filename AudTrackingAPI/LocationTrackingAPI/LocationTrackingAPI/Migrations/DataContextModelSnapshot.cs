// <auto-generated />
using System;
using LocationTrackingAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LocationTrackingAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LocationTrackingAPI.Model.Layout", b =>
                {
                    b.Property<int>("LayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("XCoord")
                        .HasColumnType("int");

                    b.Property<byte[]>("image")
                        .HasColumnType("longblob");

                    b.Property<int>("yCoord")
                        .HasColumnType("int");

                    b.HasKey("LayoutId");

                    b.ToTable("Layouts");
                });

            modelBuilder.Entity("LocationTrackingAPI.Model.TraveledPath", b =>
                {
                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MacAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("xCoord")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("yCoord")
                        .HasColumnType("decimal(65,30)");

                    b.ToTable("TraveledPaths");
                });

            modelBuilder.Entity("LocationTrackingAPI.Model.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Designation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("MacAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("TotalDistance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalTime")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WorkOrder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LocationTrackingAPI.Model.UserZonesData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Visits")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.ToTable("UserZonesData");
                });

            modelBuilder.Entity("LocationTrackingAPI.Model.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("xCoord")
                        .HasColumnType("int");

                    b.Property<int>("yCoord")
                        .HasColumnType("int");

                    b.HasKey("ZoneId");

                    b.ToTable("Zones");
                });
#pragma warning restore 612, 618
        }
    }
}
